// Generated by CoffeeScript 1.12.1
(function() {
  var arc, color_opacity, colors, duration, get_color, height, lod, partition, prune_tree, radius, redraw, svg, width, zoom, zoomable_layer;

  color_opacity = 0.7;

  duration = 2000;

  svg = d3.select('svg');

  width = svg.node().getBoundingClientRect().width;

  height = d3.select('body').node().getBoundingClientRect().height / 1.1;

  svg.attr({
    width: width,
    height: height,
    viewBox: (-width / 2) + " " + (-height / 2) + " " + width + " " + height
  });

  radius = Math.min(width, height) * 2;

  colors = {
    'Person': '#E14E5F',
    'Organization': '#A87621',
    'Place': '#43943E',
    'CreativeWork': '#AC5CC4',
    'MedicalEntity': '#2E99A0',
    'Event': '#2986EC'
  };

  zoomable_layer = svg.append('g');

  zoom = d3.behavior.zoom().scaleExtent([0.5, 64]).on('zoom', function() {
    zoomable_layer.attr({
      transform: "translate(" + (zoom.translate()) + ")scale(" + (zoom.scale()) + ")"
    });
    zoomable_layer.selectAll('.semantic_zoom').attr({
      transform: "scale(" + (1 / zoom.scale()) + ")"
    });
    return lod(zoom.scale());
  });

  svg.call(zoom);

  lod = function(z) {
    return zoomable_layer.selectAll('.semantic_zoom').attr({
      display: function(d) {
        if (20 / z < d.dx * Math.pow(d.dy, 0.4)) {
          return 'inline';
        } else {
          return 'none';
        }
      }
    });
  };

  partition = d3.layout.partition().sort(null).size([2 * Math.PI, radius * radius]).value(function() {
    return 1;
  });

  arc = d3.svg.arc().startAngle(function(d) {
    return d.x;
  }).endAngle(function(d) {
    return d.x + d.dx;
  }).innerRadius(function(d) {
    return Math.pow(d.y, 0.4);
  }).outerRadius(function(d) {
    return Math.pow(d.y + d.dy, 0.4);
  });

  get_color = function(d) {
    if (d.name === 'Thing') {
      return '#7E7F7E';
    } else if (d.name in colors) {
      return colors[d.name];
    } else {
      return get_color(d.parent);
    }
  };

  prune_tree = function(node) {
    var child, index, ref, results;
    if (node.children != null) {
      ref = node.children;
      results = [];
      for (index in ref) {
        child = ref[index];
        if (child.layer !== 'core') {
          results.push(node.children.splice(index, 1));
        } else {
          results.push(prune_tree(child));
        }
      }
      return results;
    }
  };

  redraw = function(flag) {
    return d3.json('tree.json', function(error, root) {
      var enter_labels, enter_sectors, labels, nodes, sectors;
      if (flag) {
        prune_tree(root);
      }
      tree_utils.canonical_sort(root);
      nodes = partition.nodes(root);

      /* SECTORS
       */
      sectors = zoomable_layer.selectAll('.class').data(nodes, function(d) {
        return d['@id'];
      });
      sectors.exit().transition().duration(1000).style({
        opacity: 0
      }).remove();
      sectors.select('.sector').attr({
        opacity: 0
      }).transition().delay(1000).duration(1000).attr({
        d: arc
      }).style({
        opacity: 1
      });
      sectors.select('title').text(function(d) {
        return d.name + ":\n" + d.description;
      });
      enter_sectors = sectors.enter().append('a').attr({
        "class": 'class',
        'xlink:href': function(d) {
          return "../" + d.name;
        },
        target: '_blank'
      });
      enter_sectors.append('path').attr({
        "class": 'sector'
      }).style({
        opacity: 0,
        fill: function(d) {
          return get_color(d);
        }
      }).transition().delay(2000).duration(1000).attr({
        d: arc
      }).style({
        opacity: 1
      });
      enter_sectors.append('title');

      /* Sector LABELS
       */
      labels = zoomable_layer.selectAll('.label').data(nodes, function(d) {
        return d['@id'];
      });
      labels.exit().transition().duration(1000).style({
        opacity: 0
      }).remove();
      labels.transition().delay(1000).duration(1000).attr({
        transform: function(d) {
          if (d.name === 'Thing') {
            return 'translate(0,0)';
          } else {
            return "translate(" + ((Math.pow(d.y + d.dy / 2, 0.4)) * Math.cos(d.x + d.dx / 2 - Math.PI / 2)) + ", " + ((Math.pow(d.y + d.dy / 2, 0.4)) * Math.sin(d.x + d.dx / 2 - Math.PI / 2)) + ")";
          }
        }
      });
      enter_labels = labels.enter().append('g').attr({
        opacity: 0,
        "class": 'label',
        transform: function(d) {
          if (d.name === 'Thing') {
            return 'translate(0,0)';
          } else {
            return "translate(" + ((Math.pow(d.y + d.dy / 2, 0.4)) * Math.cos(d.x + d.dx / 2 - Math.PI / 2)) + ", " + ((Math.pow(d.y + d.dy / 2, 0.4)) * Math.sin(d.x + d.dx / 2 - Math.PI / 2)) + ")";
          }
        }
      });
      enter_labels.transition().delay(2000).duration(1000).style({
        opacity: 1
      });
      enter_labels.append('text').attr({
        "class": 'halo semantic_zoom',
        dy: '0.35em'
      });
      enter_labels.append('text').attr({
        "class": 'halo_text semantic_zoom',
        dy: '0.35em'
      });
      labels.select('.halo').text(function(d) {
        return d.name;
      });
      labels.select('.halo_text').text(function(d) {
        return d.name;
      });

      /* Radio buttons on-change transition
       */
      d3.selectAll('input').on('change', function() {
        return redraw(this.value === 'local');
      });
      return lod(1);
    });
  };

  redraw(d3.select('input[checked]').node().value === 'local');

}).call(this);
